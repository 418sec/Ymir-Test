import core.io;

def test () {
    let x = [1, 2];
    let y = cast!([i32 ; 1U]) (x); // no error
}

def test2 () {
    let k = [char]::init;
    k = null;
    assert (k.ptr is null);
    assert (k.len == 0UL);

    let l = [f64]::init;
    l = null;
    assert (l.ptr is null);
    assert (l.len == 0UL);
    
    let m = [i32]::init;
    m = null;
    assert (m.ptr is null);
    assert (m.len == 0UL);    

    let c = create ([i32]::init, [char]::init);
    assert (c.k.ptr is null);
    assert (c.k.len == 0UL);
    assert (c.l.ptr is null);
    assert (c.l.len == 0UL);
}

struct
| k : [i32]
| l : [char]
 -> C;

def create (T...) (input : T) {
    let obj = C::init;
    obj.tupleof = input;
    return obj;
}

def test3 () {
    let rf = RealFoo {10};
    let prf = cast!(p!void) (&rf);
    let f = cast!(p!RealFoo) (prf);
    assert ((*f).i == 10);
}

struct
| i : i32
 -> RealFoo;

mod Test (F, T) {
    static res : bool;

    def from () -> F {
        res = true;
        return F::init;
    }

    def to () -> T {
        return from ();
    }
    
    def test () -> bool {
        res = false;
        to ();
        return res;
    }    
}

def test4 () {
    assert (Test!(i8, i64)::test ());
    assert (Test!(i16, i64)::test ());
    assert (Test!(i32, i64)::test ());
}



def main () {
    test ();
    test2 ();
    test3 ();
    println ("Success !!");
}
