import core.io;

mod cat1 (T) {
    def cat1 (i : T)-> T
        return i + 1;

    def cat2 (i : p!T) -> T {
        return *i + 1;
    }
}

def test1 () {
    let a = cat1!(int)::cat1 (1);
    assert (a == 2);
    
    let i = 1;
    let b = cat1!int::cat2(&i);
    assert (b == 2);
    imut assert (is (typeof (b) : int));    
}    


def cat3 (V : C, C, T) (x : T) {
    let u = &x;
    imut assert (is (typeof (u) : p!T));

    return x + cast!T (3) + *u + V;
}

def test2 () {
    let x = 2;
    let a = cat3!7 (x);
    assert (a == 14);
    imut assert (is (typeof (a) : int));

    let b = cat3!8U (2U);
    assert (b == 15U);
    imut assert (is (typeof (b) : uint));
}

def main () {
    test1 ();
    test2 ();
}
