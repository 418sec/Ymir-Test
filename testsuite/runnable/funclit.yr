import core.io;
import core.string;

def una (DG : FN, FN, T) (n : T) 
    return DG (n);

def namedUna (DG : fn (T)-> U, T, U) (n : T)
    return DG (n);

def bin (DG : FN, FN, T) (a : T, b : T)
    return DG (a, b);

def namedBin (DG : fn (T, T) -> U, T, U) (a : T, b : T)
    return DG (a, b);

def test () {
    assert (una!((a) => a * 2) (2) == 4);
    assert (una!((a : int) => a * 2) (2) == 4);
    assert (namedUna!((a : int) => a * 2) (2) == 4);
    assert (una!((a) { return a * 2; }) (2) == 4);

    assert (bin ! ((a, b) => a*2 + b) (2, 1) == 5);
    assert (bin ! ((a : int, b) => a*2 + b) (2, 1) == 5);
    assert (bin ! ((a, b : int) => a*2 + b) (2, 1) == 5);
    assert (bin ! ((a : int, b : int) => a*2 + b) (2, 1) == 5);
    assert (namedBin ! ((a : int, b : int) => a*2 + b) (2, 1) == 5);
    assert (namedBin ! ((a : int, b) => a*2 + b) (2, 1) == 5);        
}

def test2 () {
    let fn1 = fn (int)-> int ((a) => a * 2);
    assert (fn1 (2) == 4);

    let imut fn2 = (a) => a * 2;
    assert (fn2 (2) == 4);

    let fn3 = (a : int) => a * 2;
    assert (fn3 (2) == 4);
}

def test3 () {
    // let foo = (a : int) {
    //     return fn (int) -> int (
    //         (x : int) {
    //             return a * x;
    //         }
    //         );
    // };
    
    // assert (foo (5)(2) == 10);
    // Bug
}

def foo4 (dg : fn (int) -> int) {
    return dg (10);
}

def foo4 (dg : fn (int, int) -> int) {
    return dg (10, 20);
}

def nbar4fp (fp : fn (int)-> void) { }
def tbar4fp (T, R) (fp : fn (T) -> R) { }
def nbaz4fp (a : fn ()-> void) { return 1; }
def tbaz4fp (R) (a : fn ()-> R) { imut assert (is (R : void)); return 1; }

def test4 () {
    assert (foo4 ((a) => a * 2) == 20);
    assert (foo4 ((a, b) => a * 2 + b) == 40);

    nbar4fp ((x : int) {});
    tbar4fp ((x : int) {});

    assert (nbaz4fp ((){}) == 1);
    assert (tbaz4fp ((){}) == 1);    
}

def test5 () {
    assert (((a) => a*2)(10) == 20);
    assert (((a, s) { return s ~ s; }) (10, "str") == "strstr");
    assert (((a : int, s) { return s ~ s; }) (10, "str") == "strstr");
    assert (((a, s : const string) { return s ~ s; }) (10, "str") == "strstr");
    assert (((a : int, s : const string) { return s ~ s; }) (10, "str") == "strstr");
}

def test6 () {
    // let fp = fn (ref int) -> int;
    // fp = (ref a : int) => a;
    // assert (fp (10) == 10);
    // Bug
}

def test7 () {

    struct
    | foo : fn (int) -> int
     -> S;

    let s1 = S {(a) => a*2};    
    assert (s1.foo (2) == 4);    
}

def test8 () {
    //let a2 = [fn (int)-> int ; 0UL];
    //a2 = a2 ~ [(x) => x];
    // Bug
}

def test9 () {
    //let a1 = [(x : int) => x, (x : int) => x * 2];
    // Bug

    // let fp = match true {
    //     true => (x : int) => x;
    //     _ => (x : int) => x * 2;
    // };
    // Bug 2
}

def foo10 (a : fn (int, int)-> int) {}
def bar10 (a : fn (int, int)-> double) { return 1; }
def bar10 (a : fn (int, int)-> int) { return 2; }

def test10 () {
    foo10 ((a, b) { return a + b; });
    bar10 ((a, b) { return a + b; });
    assert (bar10 ((a, b) => 1.0) == 1);
    //assert (bar10 ((a, b) => 1.0f) == 1); Bug ?
    assert (bar10 ((a, b) => a) == 2);
}

def main () {
    test ();
    test2 ();
    test3 ();
    test4 ();
    test5 ();
    test6 ();
    test7 ();
    test8 ();
    test9 ();
    test10 ();
}

