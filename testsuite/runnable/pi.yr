import core.io;

extern (C) printf (const c : p!(char), ...)-> i32;
extern (C) sscanf (const x : p!(char), const y : p!char, ...)-> i32;
extern (C) time (x : p!u64)-> i32;


cte LONG_TIME = 4000;
static p_ : [i32];
static t_ : [i32];
static q : i32;

def main (args : [string]) {

    let starttime = 0UL, endtime = 0UL;

    if (args.len == 2) {
        sscanf (args [1].ptr, "%d".ptr, &q);
    } else {
        printf ("Usage : pi [precision]\n".ptr);
        return 1;
    }

    if q < 0 {
        printf ("Precision too low, running with precision of 0.\n".ptr);
        q = 0;
    }

    if q > LONG_TIME {
        printf ("Be prepared to wait a while ... \n".ptr);
    }

    q ++;
    p_ = [i32 ; new cast!u32 (q + 1)];
    t_ = [i32 ; new cast!u32 (q + 1)];

    time (&starttime);
    arctan (2);
    arctan (3);
    mul4 ();
    time (&endtime);

    printf ("pi = %d.".ptr,  (p_ [0]));
    for i in p_
        printf ("%d".ptr,  (i));
    printf ("\n".ptr);
    printf ("%ld seconds to compute pi with a precision of %d digits.\n".ptr, endtime - starttime, q);
    return 0;    
}

def arctan (s : i32) {
    let n;
    t_ [0] = 1;
    div (s);
    add ();
    n = 1;
    while true {
        mul (n);
        div (s * s);
        n += 2;
        div (n);
        if (((n - 1) / 2) % 2 == 0)
            add ();
        else sub ();        
        if (tiszero ()) break;
    }
}

def add () {
    for j in q .. -1 {
        if t_ [j] + p_ [j] > 9 {
            p_ [j] += (t_ [j] - 10);
            p_ [j - 1] += 1;
        } else
            p_ [j] += t_ [j];
    }
}

def sub () {
    for j in q .. -1 {
        if t_ [j] + p_ [j] > 9 {
            p_ [j] -= (t_ [j] - 10);
            p_ [j - 1] -= 1;
        } else
            p_ [j] -= t_ [j];
    }
}

def mul (mult : i32) {
    let b, carry = 0, digit = 0;
    for i in q .. -1 {
        b = (t_ [i] * mult + carry);
        digit = b % 10;
        carry = b / 10;
        t_ [i] = digit;
    }
}

def div (divis : i32) {
    let b, quotient, remainder = 0;
    for x in t_ {
        b = (10 * remainder + x);
        quotient = b / divis;
        remainder = b % divis;
        x =  (quotient);
    }
}

def div4 () {
    let c, d = 0;
    for i in 0 .. q + 1 {
        c = (10 * d + p_ [i]) / 4;
        d = (10 * d + p_ [i]) % 4;
        p_ [i] =  (c);
    }
}

def mul4 () {
    let c = 0, d = 0;
    for i in q .. -1 {
        d = ( (p_ [i]) * 4 + c) % 10;
        c = ( (p_ [i]) * 4  + c) / 10;
        p_ [i] =  (d);
    }
}

def tiszero () {
    for k in t_
        if k != 0 return false;
    return true;
}
