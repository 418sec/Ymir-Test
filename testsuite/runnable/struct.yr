import core.io;

mod foo (T) {
    struct
    | a : T
     -> Test;
}

def test () {
    let a = foo!i32::Test {10};
    let b = foo!char::Test {'t'};
    let c = Test!i32 {34};
    let d = Test!char {'y'};
}

struct (T)   
| a : T
 -> Test;

struct (T...)
| a : fn (T) -> void
 -> Signal;

def test2 () {
    let sig = Signal!(ref Test!(i32), (i32, i32))::init;
    let cte foo = (a, b) {
        a.a = b.0 + b.1;        
    };

    let test = Test!(i32)::init;
    sig.a = foo;
    sig.a (test, (1, 2));
    assert (test.a == 3);
}

def foo2 (A : i32, T...) (a : T) {
    struct
    | a : T
     -> Foo2Test;
    return Foo2Test {a};
}

def test3 () {
    let a = foo2!(10) (10, 12);
    let b = foo2!(10) (12, 10);
    a = b;
    //assert (a.a == b.a);

    let c = foo2!10 ('r');
    cte assert (is (typeof (c.a) : char));
}


def main () {
    test ();
    test2 ();
    test3 ();
}
