mod screen;

struct
| window : p!SDL_Window
| renderer : p!SDL_Renderer
 -> Screen;

def createScreen (const title : string, const windowWidth : int, const windowHeight : int, const windowPosX : int, const windowPosY : int) -> Screen
{
    if (SDL_Init (SDL_InitFlag::Video) != 0)
    {
        printErr ("SDL_Init() error");
        abort ();
    }

    let screen = Screen::init;
    screen.window = SDL_CreateWindow (title.ptr, windowPosX, windowPosY, windowWidth, windowHeight, SDL_WindowFlag::Shown);

    if (screen.window is null)
    {
        printErr ("SDL_CreateWindow() error");
        abort ();
    }

    // -1 : init the first rendering driver supporting the requested flag (index of rendering driver) 
    screen.renderer = SDL_CreateRenderer (screen.window, -1, SDL_RendererFlag::Accelerated);

    if (screen.renderer is null)
    {
        printErr ("SDL_CreateRenderer() error");
        abort ();
    }

    SDL_RenderSetLogicalSize (screen.renderer, windowWidth, windowHeight);
    
    return screen;
}

def clear (ref screen : Screen)
{
    SDL_SetRenderDrawColor (screen.renderer, 0ub, 0ub, 0ub, 255ub);
    SDL_RenderClear (screen.renderer);
}

def drawPixel(ref screen : Screen, x : i32, y: i32, pixelSize : i32)
{
    let pixel = SDL_Rect { x * pixelSize, y * pixelSize, 1 * pixelSize, 1 * pixelSize};
    if (SDL_RenderDrawRect (screen.renderer, &pixel) < 0)
    {
        printErr ("SDL_RenderDrawRect() error");
        abort ();
    }
    SDL_RenderPresent (screen.renderer);
}
