mod src.game;

import core.io;
import core.string;
import std.memory;
import src.lib.signal;
import src.lib.sdl;
import src.screen;
import src.eventHandler;
import src.player;
import src.resource;

struct
| screen : Screen
| eventHdl : EventHandler
| continue : bool
| mainPlayer : Player
| testPlayer : Player
| resourcesManager : p!ResourcesManager
 -> Game;

// for now...
imut gWindowWidth = 600;
imut gWindowHeight = 300;
imut gWindowPosX = 100;
imut gWindowPosY = 100;
imut gTitle = "Teelol";
imut gPlayerName = "Abitbol";
imut gDefaultPosX = 10;
imut gDefaultPosY = 10;

def createGame (ref game : Game) 
{
    game.screen = createScreen (gTitle, gWindowWidth, gWindowHeight, gWindowPosX, gWindowPosY);
    game.eventHdl = createEventHandler (game);
    game.continue = true;
    game.resourcesManager = createResourcesManager (game.screen);

    game.mainPlayer = createPlayer (gPlayerName.dup(), gDefaultPosX, gDefaultPosY, ResourceType::Tee);
    game.testPlayer = createPlayer (gPlayerName.dup(), 50, 50, ResourceType::OtherTee);
    
    game.screen.addDrawable (&(game.mainPlayer.drawable));
    game.screen.addDrawable (&(game.testPlayer.drawable));
    
    initEvents (game.eventHdl);
}

def start (ref game : Game)
{
    let screen = game.screen;
    // we don't forget to free sdl at the end of the scope !
    on exit => screen.destroy();
    
    while (game.continue)
    {
        screen.clear();
        game.eventHdl.handleEvents ();
        screen.display();
    }
}

def initEvents (ref eventHdl : EventHandler)
{
    let quitSignal = Signal!(ref Game)::init;
    quitSignal.connect (onQuit);
    let keyUpSignal = Signal!(ref Game)::init;
    keyUpSignal.connect (onKeyUp);
    let keyDownSignal = Signal!(ref Game)::init;
    keyDownSignal.connect (onKeyDown);
    let keyRightSignal = Signal!(ref Game)::init;
    keyRightSignal.connect (onKeyRight);
    let keyLeftSignal = Signal!(ref Game)::init;
    keyLeftSignal.connect (onKeyLeft);
    let mouseLeftClickSignal = Signal!(ref Game, t!(int, int))::init;
    mouseLeftClickSignal.connect (onMouseLeftClick);
    let mouseRightClickSignal = Signal!(ref Game, t!(int, int))::init;
    mouseRightClickSignal.connect (onMouseRightClick);
    
    eventHdl.onEvent (SDL_EventType::QUIT, quitSignal);
    eventHdl.onEvent (SDL_EventType::KEYUP, SDL_Keycode::SDLK_ESCAPE, quitSignal);
    eventHdl.onEvent (SDL_EventType::KEYDOWN, SDL_Scancode::SDL_SCANCODE_UP, keyUpSignal);
    eventHdl.onEvent (SDL_EventType::KEYDOWN, SDL_Scancode::SDL_SCANCODE_DOWN, keyDownSignal);
    eventHdl.onEvent (SDL_EventType::KEYDOWN, SDL_Scancode::SDL_SCANCODE_RIGHT, keyRightSignal);
    eventHdl.onEvent (SDL_EventType::KEYDOWN, SDL_Scancode::SDL_SCANCODE_LEFT, keyLeftSignal);
    eventHdl.onEvent (SDL_EventType::MOUSEBUTTONUP, SDL_Mousecode::SDL_BUTTON_LEFT, mouseLeftClickSignal);
    eventHdl.onEvent (SDL_EventType::MOUSEBUTTONDOWN, SDL_Mousecode::SDL_BUTTON_RIGHT, mouseRightClickSignal);
}

def onQuit (ref game : Game)
{
    game.continue = false;
    println ("Bye !");
}

def onKeyUp (ref game : Game)
{
    game.mainPlayer.goUp ();
}

def onKeyDown (ref game : Game)
{
    game.mainPlayer.goDown ();
}

def onKeyRight (ref game : Game)
{
    game.mainPlayer.goRight ();
}

def onKeyLeft (ref game : Game)
{
    game.mainPlayer.goLeft ();
}

def onMouseLeftClick (ref game : Game, pos : t!(int, int))
{
    let (x, y) = pos;
    game.mainPlayer.goTo (x, y);
}

def onMouseRightClick (ref game : Game, pos : t!(int, int))
{
    game.mainPlayer.setResource (ResourceType::OtherTee);
}
