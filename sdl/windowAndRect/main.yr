mod main;

import core.io;
import sdl;

imut WindowWidth = 600;
imut WindowHeight = 300;
imut WindowPosX = 100;
imut WindowPosY = 100;

def main() -> int
{
    if (SDL_Init (SDLInitFlag::Video) != 0)
    {
        println ("SDL_Init() error");
        return -1;
    }

    let window = SDL_CreateWindow ("Test SDL with Ymir !".ptr, WindowPosX, WindowPosY, WindowWidth, WindowHeight, SDLWindowFlag::Shown);

    if (window is null)
    {
        println ("SDL_CreateWindow() error");
        return -1;
    }

    let renderer = SDL_CreateRenderer (window, -1, SDLRendererFlag::Accelerated);

    if (renderer is null)
    {
        println ("SDL_CreateRenderer() error");
        return -1;
    }

    SDL_RenderSetLogicalSize (renderer, WindowWidth, WindowHeight);

    let stop = false;
    let event = SDLEvent::init;

    while (!stop)
    {
        while (SDL_PollEvent (&event) != 0)
        {
            match event.type {
                SDLEventType::Quit => stop = true;
                SDLEventType::KeyUp => {
                    let keyEvent = cast!(p!SDLKeyboardEvent) (&event);
                    if ((*keyEvent).sym == SDL_Keycode::SDLK_ESCAPE)
                        stop = true;
                }
            }
        }
        
        let rect = SDLRect { 10, 10, 10, 10 };
        SDL_SetRenderDrawColor (renderer, 255ub, 255ub, 255ub, 255ub);
        SDL_RenderFillRect (renderer, &rect);

        SDL_RenderPresent (renderer);
    }

    SDL_DestroyRenderer (renderer);
    SDL_DestroyWindow (window);

    return 0;
}
