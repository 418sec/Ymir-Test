mod main;
import std::io;
import sdl;

alias WindowWidth = 600;
alias WindowHeight = 300;
alias WindowPosX = 100;
alias WindowPosY = 100;

def main() -> i32
{
    if (SDL_Init (SDLInitFlag::Video) != 0)
    {
        println ("SDL_Init() error");
        return -1;
    }

    let window = SDL_CreateWindow ("Test SDL with Ymir !"s8.ptr, WindowPosX, WindowPosY, WindowWidth, WindowHeight, SDLWindowFlag::Shown);

    if (window is null)
    {
        println ("SDL_CreateWindow() error");
        return -1;
    }

    let renderer = SDL_CreateRenderer (window, -1, SDLRendererFlag::Accelerated);

    if (renderer is null)
    {
        println ("SDL_CreateRenderer() error");
        return -1;
    }

    SDL_RenderSetLogicalSize (renderer, WindowWidth, WindowHeight);

    let mut stop = false;
    let event = SDLEvent (0u32, [0u8; 52]);
    let mut x = 10, mut y = 10, w = 10, h = 10;
    while (!stop)
    {
        while (SDL_PollEvent (&event) != 0)
        {
            if event.t == SDLEventType::Quit
                stop = true
            else if (event.t == SDLEventType::KeyUp) {
                let keyEvent = cast!(&SDLKeyboardEvent) (cast!(&void) (&event));
                if ((*keyEvent).sym == SDL_Keycode::SDLK_ESCAPE)
                    stop = true
            } else if (event.t == SDLEventType::KeyDown) {
                let keyEvent = cast!(&SDLKeyboardEvent) (cast!(&void) (&event));
                if ((*keyEvent).sym == SDL_Keycode::SDLK_z)
                    y -= 10
                else if ((*keyEvent).sym == SDL_Keycode::SDLK_s)
                    y += 10
                else if ((*keyEvent).sym == SDL_Keycode::SDLK_q)
                    x -= 10
                else if ((*keyEvent).sym == SDL_Keycode::SDLK_d)
                    x += 10
            }
        }
        
        let rect = SDLRect ( x, y, w, h );
        SDL_SetRenderDrawColor (renderer, 255u8, 255u8, 255u8, 255u8);
        SDL_RenderFillRect (renderer, &rect);

        SDL_RenderPresent (renderer);
    }

    SDL_DestroyRenderer (renderer);
    SDL_DestroyWindow (window);

    return 0;
}
