mod sdl;

pub {
    extern (C) def SDL_Init (flags : u32) -> i32;
    extern (C) def SDL_CreateWindow (title : &c8, x : i32, y : i32, w : i32, h : i32, flags : u32) -> &SDLWindow;
    extern (C) def SDL_CreateRenderer (window : &SDLWindow, index : i32, flags : u32) -> &SDLRenderer;
    extern (C) def SDL_RenderSetLogicalSize(renderer : &SDLRenderer, w : i32, h : i32) -> i32;
    extern (C) def SDL_PollEvent (event : &SDLEvent) -> i32;
    extern (C) def SDL_SetRenderDrawColor (renderer : &SDLRenderer, r : u8, g : u8, b : u8, a : u8) -> i32;
    extern (C) def SDL_RenderFillRect (renderer : &SDLRenderer, rect : &SDLRect) -> i32;
    extern (C) def SDL_RenderPresent (renderer : &SDLRenderer);
    extern (C) def SDL_DestroyRenderer (renderer : &SDLRenderer);
    extern (C) def SDL_DestroyWindow (window : &SDLWindow);
}

pub struct
| data : &void
 -> SDLWindow;

pub struct
| data : &void
 -> SDLRenderer;

pub struct
| t : u32
| data : [u8 ; 52u32] // because sizeof (SDL_Event) = 2 bytes (type) + 52 bytes
 -> SDLEvent;

pub struct
| t : u32
| timestamp : u32
| windowId : u32
| which : u32
| button : u8
| state : u8
| clicks : u8
| padding1 : u8
| x : i32
| y : i32
-> SDLMouseButtonEvent;

pub struct
| t : i32
| timestamp : u32
| windowId : u32
| state : u8
| repeat : u8
| padding2 : u8
| padding3 : u8
| scancode : u32 //SDL_Scancode
| sym : u32
| mode : u16
| unicode : u32    
-> SDLKeyboardEvent;

pub struct
| x : i32
| y : i32
| w : i32
| h : i32
 -> SDLRect;

// TODO : complete by using SDL.h
pub enum : u32
| Audio = 16u32
| Video = 32u32
 -> SDLInitFlag;

// TODO : complete by using SDL_video.h
pub enum : u32
| FullScreen = 1u32
| OpenGL = 2u32
| Shown = 4u32
| Hidden = 8u32
| Borderless = 16u32
 -> SDLWindowFlag;

pub enum : u32
| Software = 1u32
| Accelerated = 2u32
| PresentVSync = 4u32
| TargetTexture = 8u32
 -> SDLRendererFlag;

// TODO : complete by using SDL_events.h
pub enum : u32
| Quit = 256u32
| KeyDown = 768u32
| KeyUp = 769u32
| MouseMotion = 1024u32
| MouseButtonDown = 1025u32
| MouseButtonUp = 1026u32
| MouseWheel = 1027u32
| Unknown = 0u32 // not used by the SDL
 -> SDLEventType;

pub enum : u32    
| SDLK_UNKNOWN = 0u32
| SDLK_RETURN = cast!u32 ('\r')
| SDLK_ESCAPE = 27u32
| SDLK_BACKSPACE = cast!u32 ('\b')
| SDLK_TAB = cast!u32 ('\t')
| SDLK_SPACE = cast!u32 (' ')
| SDLK_EXCLAIM = cast!u32 ('!')
| SDLK_QUOTEDBL = cast!u32 ('"')
| SDLK_HASH = cast!u32 ('#')
| SDLK_PERCENT = cast!u32 ('%')
| SDLK_DOLLAR = cast!u32 ('$')
| SDLK_AMPERSAND = cast!u32 ('&')
| SDLK_QUOTE = 39u32
| SDLK_LEFTPAREN = cast!u32 ('(')
| SDLK_RIGHTPAREN = cast!u32 (')')
| SDLK_ASTERISK = cast!u32 ('*')
| SDLK_PLUS = cast!u32 ('+')
| SDLK_COMMA = cast!u32 (',')
| SDLK_MINUS = cast!u32 ('-')
| SDLK_PERIOD = cast!u32 ('.')
| SDLK_SLASH = cast!u32 ('/')
| SDLK_0 = cast!u32 ('0')
| SDLK_1 = cast!u32 ('1')
| SDLK_2 = cast!u32 ('2')
| SDLK_3 = cast!u32 ('3')
| SDLK_4 = cast!u32 ('4')
| SDLK_5 = cast!u32 ('5')
| SDLK_6 = cast!u32 ('6')
| SDLK_7 = cast!u32 ('7')
| SDLK_8 = cast!u32 ('8')
| SDLK_9 = cast!u32 ('9')
| SDLK_COLON = cast!u32 ('=')
| SDLK_SEMICOLON = cast!u32 (';')
| SDLK_LESS = cast!u32 ('<')
| SDLK_EQUALS = cast!u32 ('=')
| SDLK_GREATER = cast!u32 ('>')
| SDLK_QUESTION = cast!u32 ('?')
| SDLK_AT = cast!u32 ('@')
/*
Skip uppercase letters
 */
| SDLK_LEFTBRACKET = cast!u32 ('[')
| SDLK_BACKSLASH = cast!u32 (92)
| SDLK_RIGHTBRACKET = cast!u32 (']')
| SDLK_CARET = cast!u32 ('^')
| SDLK_UNDERSCORE = cast!u32 ('_')
| SDLK_BACKQUOTE = cast!u32 ('`')
| SDLK_a = cast!u32 ('a')
| SDLK_b = cast!u32 ('b')
| SDLK_c = cast!u32 ('c')
| SDLK_d = cast!u32 ('d')
| SDLK_e = cast!u32 ('e')
| SDLK_f = cast!u32 ('f')
| SDLK_g = cast!u32 ('g')
| SDLK_h = cast!u32 ('h')
| SDLK_i = cast!u32 ('i')
| SDLK_j = cast!u32 ('j')
| SDLK_k = cast!u32 ('k')
| SDLK_l = cast!u32 ('l')
| SDLK_m = cast!u32 ('m')
| SDLK_n = cast!u32 ('n')
| SDLK_o = cast!u32 ('o')
| SDLK_p = cast!u32 ('p')
| SDLK_q = cast!u32 ('q')
| SDLK_r = cast!u32 ('r')
| SDLK_s = cast!u32 ('s')
| SDLK_t = cast!u32 ('t')
| SDLK_u = cast!u32 ('u')
| SDLK_v = cast!u32 ('v')
| SDLK_w = cast!u32 ('w')
| SDLK_x = cast!u32 ('x')
| SDLK_y = cast!u32 ('y')
| SDLK_z = cast!u32 ('z')
 -> SDL_Keycode;
