import std::io
    
struct
| func : [fn (T) -> void] = []
 -> Signal (T...);


def connect (T...) (a : Signal!(T), b : fn (T)-> void) -> Signal!T {
    let z = (a.func ~ [b]);
    Signal!(T) (?func = z)    
}

def call (T...) (sig : Signal!T, elems : T) {
    for i in 0 .. cast!i32 (sig.func.len) {
        sig.func [i] (expand elems)
    }
}

def test (a : i32, b : [c32]) {
    println ("Test {");
    println ('\t', b);
    println ('\t', a);
    println ("}");
}

def main () {
    let mut a = Signal!(i32, [c32]);
    a = a.connect (&test);
    a = a.connect (|x : i32, y : [c32]| => println (x, ' ', y));
    a.call (1, "salut");
}
