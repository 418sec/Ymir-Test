import std::io;
import std::range, std::random;
import std::algorithm::_;

alias w = 20u32;
alias h = 20u32;

def walk (x : i32, y : i32, ref mut vis : [mut bool], ref mut hor : [mut i32], ref mut ver : [mut i32]) {
    vis [y *:i32 w + x] = true;
    for z in shuffle (alias [[x - 1, y], [x, y + 1], [x + 1, y], [x, y - 1]]) {
        let test = z [0] < 0 || z [1] < 0 || z [0] >=:i32 w || z [1] >=:i32 h || vis [z [1] *:i32 w + z [0]];
        if (!test) {
            if z [0] == x { hor [max (y, z [1]) *:i32 w + x] = 1; }
            if z [1] == y { ver [y *:i32 w + (max (x, z [0]))] = 1; }
            walk (z [0], z [1], ref vis, ref hor, ref ver);
        }
    }
}

def show (hor : [i32], ver : [i32]) {
    for i in 0u32 .. h {
        for j in 0u32 .. w {
            if hor [i * w + j] == 0 { print ("+---"); }
            else print ("+   "); 
        }
        println ("+");
        for j in 0u32 .. w {
            if ver [i * w + j] == 0 { print ("|   "); }
            else print ("    "); 
        }
        println ("|");
    }
    
    for _ in 0u32 .. w {
        print ("+---");
    }
    println ("+");
    
}

def main () {
    let mut vis : [mut bool] = alias [false ; w * h];
    let mut hor : [mut i32] = alias [0 ; w * h];
    let mut ver : [mut i32] = alias [0 ; w * h];
    
    walk (uniform (0, cast!i32(w)), uniform (0, cast!i32 (h)), ref vis, ref hor, ref ver);
    show (hor, ver);
}
