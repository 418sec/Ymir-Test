import std::io;
import std::algorithm::mutation;

//cte trans = "";
alias trans = "___#_##_";

def v (T) (cell : T, i : i32) -> i32
    if cell [i] != '_' { 1 } else 0

def evolve (ref mut cell : [mut c32], ref mut backup : [mut c32], len : u64) -> bool {
    let mut diff = 0u64;
    for i in 0 .. cast!i32 (len) {
        let x = cell.v ((i - 1)%:i32 len) * 4 + cell.v (i) * 2 + cell.v ((i + 1)%:i32 len);
        backup [i] = trans [x];
        if backup [i] != cell [i]
            diff += 1u64;
    }

    for i in 0u64 .. len {
        cell [i] = backup [i];
    }
    return diff != 0u64;
}

def main () {
    let mut c : [mut c32] = copy "#_#_#_#_#_#_#_#_#_#_",
        mut b : [mut c32] = copy "____________________";
    
    println (c);
    while evolve (ref c, ref b, c.len - 2u64) {
        println (c);
    }
}
