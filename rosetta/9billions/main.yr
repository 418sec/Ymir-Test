import std.bigint;
import std.vec, std.algorithm._;

static cache : Vector!(Vector!mpz_t);

self () {
    cache.push (vec: {BigNum (1)});
}

def cumu (n : u32) -> Vector!mpz_t {
    for l in cache.len .. n + 1U {
        let r_ = vec: {BigNum (0)};
        for x in 1U .. l + 1U {
            r_.push (r_ [r_.len - 1U] + cache [l - x][min (x, l - x)]);
        }
        cache.push (r_);
    }
    return cache [n];
}

def row (n : u32) -> Vector!mpz_t {
    let r_ = cumu (n);
    return vec: [r_ [i + 1U] - r_ [i] | i in 0U .. n];
}

def back (T) (ref n : Vector!T) -> ref T {
    return n [n.len - 1U];
}

def main () {
    println ("Rows : ");
    for x in 1U .. 11U {
        print (x, ": ");
        println (row (x));
    }

    for x in [23U, 123U, 1234U] {
        println (x, " ", cumu (x).back ());
    }
}

