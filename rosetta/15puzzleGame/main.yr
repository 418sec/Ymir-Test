import std::io;
import std::random;
import std::algorithm::_;

struct
| mut brd : [mut i32 ; 16_u64]
| mut x : i32
| mut y : i32
 -> P15;

enum
| LEFT = 0
| RIGHT = 1
| UP = 2
| DOWN = 3
| NONE = 4
 -> Move;

def play () {
    let mut brd = create ();
    while true {
        while !brd.isDone () {
            brd.draw ();
            println ("Move ? (u) up, (d) down, (l) left, (r) right : ");
            brd = brd.move ((read!c8).toMove ());
        }
        
        brd.draw ();
        println ("Congratulations !\nPlay again (Y/N) ?");
        let a = read!c32 ();
        
        if a != 'Y' && a != 'y' break {}
    }
}

def create () -> P15 {
    let mut brd  : [mut i32 ; 16]= generate!(16_u64, |i, n| { 
        if (i < n - 1u64)
            cast!(i32) (i) + 1
        else 0
    });
    
    let mut p15 = P15 (brd, 3, 3);
    
    for _ in 0 .. 1000 {
        p15 = p15.move (uniform (0, 4).toMove (), ?add=true);
    }
    
    p15
}

def toMove (u : i32) -> Move {
    if (u == Move::LEFT) Move::LEFT
    else if (u == Move::RIGHT) Move::RIGHT
    else if (u == Move::UP) Move::UP
    else if (u == Move::DOWN) Move::DOWN
    else Move::NONE
}

def toMove (c : c8) -> Move {
    if (c == 'u'c8) Move::UP
    else if (c == 'd'c8) Move::DOWN
    else if (c == 'l'c8) Move::LEFT
    else if (c == 'r'c8) Move::RIGHT
    else Move::NONE
}

def move (brd : P15, d : Move, add : bool = false) -> P15 {   
    let x = if (d == Move::LEFT && brd.x < 3) { brd.x + 1 }
    else if (d == Move::RIGHT && brd.x > 0) { brd.x - 1 }
    else brd.x;

    let y =  if (d == Move::UP && brd.y < 3) { brd.y + 1 }
    else if (d == Move::DOWN && brd.y > 0) { brd.y - 1 }
    else brd.y;
        
    if (x != brd.x || y != brd.y) { // MOVE right        
        let mut res : [mut i32 ; 16] = brd.brd;
        res [brd.y * 4 + brd.x] = brd.brd [y * 4 + x];
        res [y * 4 + x] = 0;
        P15 (res, x, y)
    } else if (add) move (brd, uniform (0, 4).toMove ())
    else brd
}

def draw (brd : P15) {
    println ("\n\n");
    for y in 0 .. 4 {
        println ("+----+----+----+----+");
        for x in 0 .. 4 {
            let i = brd.brd [x + y * 4];
            print ("| ");
            if (i < 10) print (" ")
            if (i == 0) print ("  ")
            else print (i, " ")
        }
        println ("|");
    }
    println ("+----+----+----+----+");
}

def isDone (brd : P15) -> bool {
    for i in 0 .. 15
        if (brd.brd [i] != i + 1) return false;
    true
}

def main () {
    play ();    
}
