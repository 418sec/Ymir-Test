import core.io;
import std.conv;
import std.socket;

extern (C) printf (const c : p!char, ...);

enum
| InvalidSocket : -1
 -> SockResCode;

enum
| Error : -1
| Success : 0
 -> RetCode;

def main(args) -> int
{
    let port = 8888US;
    let retCode = RetCode::Success;

    if (args.len > 1u)
    {
        port = to!ushort(args[1]);
    }
    
    let sockServer = socket (cast!int(AddrFamily::AfInet), SocketType::SockStream, 0);
    if (sockServer == SockResCode::InvalidSocket)
    {
        println("Error while creating the socket.");
        return RetCode::Error;
    }
    else
    {
        println("Socket created !");
    }

    let serverAddr = SockAddrIn::init;
    serverAddr.sin_family = cast!short (AddrFamily::AfInet);
    serverAddr.sin_addr.s_addr = AddrType::InAddrAny;
    serverAddr.sin_port = htons (port);
    
    let res = bind (sockServer, cast!(p!SockAddr) (&serverAddr), SockAddrIn::sizeof);
    if (res < 0)
    {
        printf("err : %d\n".ptr, res);
        println ("Bind error");
        retCode = RetCode::Error;
    }
    else
    {
        if (listen (sockServer, 3) < 0)
        {
            println ("Listen error");
            retCode = RetCode::Error;
        }
        else
        {
            println ("Waiting for incoming connections...");

            let clientAddr = SockAddrIn::init;
            let lenAddr = SockAddrIn::sizeof;
            let clientSock = accept (sockServer, cast!(p!SockAddr) (&clientAddr), cast!(p!uint) (&lenAddr));

            if (clientSock < 0)
            {
                println ("Accept error");
                retCode = RetCode::Error;                
            }
            else
            {
                println ("Client connected !");

                while (recvMessage(clientSock)) {}

                println ("Client disconnected !");
            }
        }
    }
    
    close (sockServer);
    return retCode;
}

def recvMessage (sock : int) -> bool
{
    let messageSize = uint::init;
    let readSize = recv (sock, cast!(p!void) (&messageSize), cast!int(uint::sizeof), 0u);

    if (readSize < 0)
        return false;
    else
        print ("Message size : "); println (messageSize);
    
    let message = [char ; messageSize];
    readSize = recv (sock, cast!(p!void) (message.ptr), cast!int(messageSize), 0u);

    if (readSize < 0)
        return false;

    if (readSize > 0)
        println (message);

    return true;
}
