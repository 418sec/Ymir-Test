mod src.screen;

extern (C) printf (const c : p!char, ...);

import core.io;
import std.abort;
import src.lib.sdl;

struct
| window : p!SDL_Window
| renderer : p!SDL_Renderer
 -> Screen;

// TODO : the createwindow flag should come from the main function in order to propose the fullscreen mode
def createScreen (const title : string, const windowWidth : int, const windowHeight : int, const windowPosX : int, const windowPosY : int) -> Screen
{
    if (SDL_Init (SDL_InitFlag::Video) != 0)
    {
        printErr ("SDL_Init() error");
        abort ();
    }

    let screen = Screen::init;
    screen.window = SDL_CreateWindow (title.ptr, windowPosX, windowPosY, windowWidth, windowHeight, SDL_WindowFlag::Shown);

    if (screen.window is null)
    {
        printErr ("SDL_CreateWindow() error");
        abort ();
    }

    // -1 : init the first rendering driver supporting the requested flag (index of rendering driver) 
    screen.renderer = SDL_CreateRenderer (screen.window, -1, SDL_RendererFlag::Accelerated);

    if (screen.renderer is null)
    {
        printErr ("SDL_CreateRenderer() error");
        abort ();
    }

    SDL_RenderSetLogicalSize (screen.renderer, windowWidth, windowHeight);

    return screen;
}

def display (ref screen : Screen)
{
    SDL_RenderPresent (screen.renderer);
}

def destroy (ref screen : Screen)
{
    println ("destroy !");
    if (screen.renderer !is null)
        SDL_DestroyRenderer (screen.renderer);
    if (screen.window !is null)
        SDL_DestroyWindow (screen.window);
}

def printErr (const message : string)
{
    print (message, " : ");
    printf ("%s".ptr, SDL_GetError());
}
