import std::io;

extern (C) {
    def fopen  (path : &c8, mode : &c8) -> &i32;
    def fclose (file : &i32) -> i32;
    def fgetc  (file : &i32) -> c8;
    def fgets  (buf : &c8, n : i32, file : &i32) -> i32;
    def feof   (file : &i32)-> i32;
}

struct
| handle : &i32
 -> File;

alias EOF = -1;

def open (filePath : [c8], mode : [c8]) -> File {    
    File (fopen (filePath.ptr, mode.ptr))
}

def close (ref mut file : File) {
    fclose (file.handle);
    file = File (null);
}

def isOpen (file : File) -> bool {
    file.handle !is null
}

def readc (T of c8) (file : File) -> c8 {
    fgetc (file.handle)
}

def isEof (file : File) -> bool
    feof (file.handle) == 1

def main () {
    let file = open ("main.yr"s8, "r"s8);

    while !file.isEof () {
        let c = file.readc!(c8);
        print (c);
    }
    
    if file.isOpen () {
        println ("Closing file");
        (ref file).close ()
    }
}
